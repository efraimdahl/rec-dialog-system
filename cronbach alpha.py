import numpy as np
from scipy.stats import pearsonr
import matplotlib.pyplot as plt

def cronbach_alpha(data):
    """
    Calculate Cronbach's alpha value

    :parameter
    data (numpy.ndarray)

    :return
    float: Cronbach's alpha
    """
    # Calculate the average
    question_means = np.mean(data, axis=0)

    # Calculate the total score for each subject
    subject_sums = np.sum(data, axis=1)

    # Calculate the mean of the total
    grand_mean = np.mean(data)

    # Calculate the variance of each problem
    question_variances = np.var(data, axis=0, ddof=1)

    # Calculate the numerator
    numerator = len(data) * np.var(question_means, ddof=1)

    # Calculate the denominator
    denominator = np.sum(question_variances) + ((len(data) / (len(data) - 1)) * numerator)

    # calculate Cronbach's alpha
    cronbach_alpha = (len(data) / (len(data) - 1)) * (1 - (denominator / (np.var(subject_sums) - (len(data) * np.var(question_means)))))

    return cronbach_alpha

# each line is the value for one question
survey_data = np.array([
    [3,3,4,3,5,3,4,1,5,4,4,4,3,2,5,3,3],
    [2,1,3,4,4,2,3,2,5,4,4,3,4,2,4,4,2],
    [3,4,3,4,5,4,4,3,5,5,4,4,4,4,3,5,4],
    [2,1,3,4,3,4,4,3,5,5,5,4,5,4,4,4,2],
    [3,2,4,3,4,3,4,2,5,4,3,4,4,3,4,4,4],
    [2,1,4,3,4,2,4,4,5,5,4,3,3,2,4,4,5],
    [3,4,2,3,4,2,3,2,5,5,2,4,4,3,4,4,3],
    [3,2,3,3,4,2,2,2,5,3,3,3,4,3,2,3,2],
    [2,1,4,3,4,3,1,2,5,2,2,4,4,3,1,2,3],
    [1,4,4,3,2,3,1,2,5,4,3,3,3,4,1,2,3],
    [1,1,4,4,4,2,4,2,5,5,3,2,3,2,1,2,3]
])
survey_data_B = np.array([
    [1,1,2,1,5,1,3,4,4,2,4,1,4,2,4,3,2],
    [2,2,1,1,4,1,4,3,4,3,4,2,3,3,4,4,3],
    [4,4,3,3,4,3,5,4,4,3,3,2,4,3,3,5,4],
    [3,1,1,2,4,3,4,4,4,3,4,2,3,4,4,4,3],
    [3,2,3,2,4,3,3,4,4,3,5,2,3,3,3,4,4],
    [3,1,2,1,4,2,4,4,4,5,4,2,4,3,3,3,3],
    [2,2,3,2,3,2,3,2,4,5,3,2,4,3,4,4,3],
    [1,2,2,1,4,1,1,4,4,2,3,2,4,3,1,2,1],
    [2,2,1,1,2,2,1,4,4,2,2,1,4,3,1,1,3],
    [1,2,2,2,2,1,1,3,4,1,2,1,2,3,1,1,3],
    [2,1,3,4,3,1,3,4,4,5,3,1,3,2,1,3,3]
])
print(cronbach_alpha(survey_data_B.T))
output = []
for i in range(len(survey_data)):
    line = []
    for j in range(len(survey_data)):
        #correlation_coefficient, _ = pearsonr(survey_data[i], survey_data[j])
        # Transform 2 questions' value to calculate the value
        value = cronbach_alpha(survey_data[[i,j]].T)
        #line.append(correlation_coefficient)
        line.append(value)
    output.append(line)
plt.figure(figsize=(10, 6))

table = plt.table(cellText=output, loc='center', cellLoc='center')

plt.axis('off')

plt.show()
print(output)
#print(survey_data[0:2])
#alpha = cronbach_alpha(survey_data)
#print(f"Cronbach's alpha: {alpha}")
import pandas as pd
#csv_file = "cronbach_alpha_B.csv"
table = [[1.0, 0.7960029457578485, 0.35045651291117486, 0.6840909231545059, 0.6929861498301267, 0.6933168123211718, 0.48699607654623717, 0.669642857142857, 0.36164847647365284, 0.30335166981067213, 0.33587572106361],
 [0.7960029457578485, 1.0, 0.470049932795482, 0.8050955272183666, 0.6450827038379672, 0.7330018740663183, 0.590705236576487, 0.40070896589170607, 0.2164075752892755, 0.1576939250741925, 0.23318447632722036],
 [0.35045651291117486, 0.470049932795482, 1.0, 0.3597875718720091, 0.3447851413076001, 0.3030903023560533, 0.16804523991415915, 0.10783277320343845, 0.1996674976919165, 0.09969143409242986, 0.2554351053071128],
 [0.6840909231545059, 0.8050955272183666, 0.3597875718720091, 1.0, 0.6798805521327853, 0.7197530808259416, 0.3804593150977575, 0.32260899615570965, 0.3076471991047502, 0.14294606229262652, 0.22441978168289],
 [0.6929861498301267, 0.6450827038379672, 0.3447851413076001, 0.6798805521327853, 1.0, 0.641658814282893, 0.32147078412445623, 0.4420376769680542, 0.37400662077154784, 0.3623487262040612, 0.38289560268197315],
 [0.6933168123211718, 0.7330018740663183, 0.3030903023560533, 0.7197530808259416, 0.641658814282893, 1.0, 0.6424334255469839, 0.4898724967365809, 0.43659857069339353, 0.12472961248890954, 0.553848892303323],
 [0.48699607654623717, 0.590705236576487, 0.16804523991415915, 0.3804593150977575, 0.32147078412445623, 0.6424334255469839, 1.0, 0.22262677784970847, 0.1202322016471676, 0.0, 0.44077853201547174],
 [0.669642857142857, 0.40070896589170607, 0.10783277320343845, 0.32260899615570965, 0.4420376769680542, 0.4898724967365809, 0.22262677784970847, 1.0, 0.6805879900113696, 0.5877180650481594, 0.35102800923189315],
 [0.36164847647365284, 0.2164075752892755, 0.1996674976919165, 0.3076471991047502, 0.37400662077154784, 0.43659857069339353, 0.1202322016471676, 0.6805879900113696, 1.0, 0.7417981870189156, 0.3055050463303892],
 [0.30335166981067213, 0.1576939250741925, 0.09969143409242986, 0.14294606229262652, 0.3623487262040612, 0.12472961248890954, 0.0, 0.5877180650481594, 0.7417981870189156, 1.0, 0.35627764550103425],
 [0.33587572106361, 0.23318447632722036, 0.2554351053071128, 0.22441978168289, 0.38289560268197315, 0.553848892303323, 0.44077853201547174, 0.35102800923189315, 0.3055050463303892, 0.35627764550103425, 1.0]]
table_2 = [[0.498046875, -0.12766472868217077, -4.324436448475287, 0.045243818681318874, 0.3775768979057593, 0.2601368801652893, 0.23830447384066572, -4.287020905923349, -16.27701531753132, -9.06674747392437, -2.3679821019174643], [-0.12766472868217077, 0.498046875, 10.667770127118644, -0.6935763888888878, -0.5724068239546691, -0.08325559701492544, 0.040977515243902564, 0.1328124999999999, -0.5933249482978035, -0.5345311906119342, 0.09258470719783683], [-4.324436448475287, 10.667770127118644, 0.498046875, -0.6878422619047626, -4.478223778735639, -3.3774338205232994, -11.418548289980714, 4.800269344152685, 4.852690658844765, 5.433107398715416, 6.679088025990102], [0.045243818681318874, -0.6935763888888878, -0.6878422619047626, 0.498046875, 0.21545520698576964, 0.14029489436619752, -0.3650255503144647, -21.221610104422613, 33.062650240384826, -48.60937499999952, -5.57410037878787], [0.3775768979057593, -0.5724068239546691, -4.478223778735639, 0.21545520698576964, 0.498046875, 0.34325935990338163, 0.1411425666405336, -23.01797172053224, -2527.6874999984993, 1005.789062500242, -4.648794522849456], [0.2601368801652893, -0.08325559701492544, -3.3774338205232994, 0.14029489436619752, 0.34325935990338163, 0.498046875, 0.06649215717981871, -4.554496951219519, -10.97101571901324, -6.7105464990375285, -1.2937763076179962], [0.23830447384066572, 0.040977515243902564, -11.418548289980714, -0.3650255503144647, 0.1411425666405336, 0.06649215717981871, 0.498046875, -1.6246148767605644, -6.614966529029021, -2.3324496985417826, -1.7367217715943268], [-4.287020905923349, 0.1328124999999999, 4.800269344152685, -21.221610104422613, -23.01797172053224, -4.554496951219519, -1.6246148767605644, 0.498046875, 0.28617971728081354, 0.23311382192846036, 0.28674452679235907], [-16.27701531753132, -0.5933249482978035, 4.852690658844765, 33.062650240384826, -2527.6874999984993, -10.97101571901324, -6.614966529029021, 0.28617971728081354, 0.498046875, 0.2798428207306712, 0.25222952501954665], [-9.06674747392437, -0.5345311906119342, 5.433107398715416, -48.60937499999952, 1005.789062500242, -6.7105464990375285, -2.3324496985417826, 0.23311382192846036, 0.2798428207306712, 0.498046875, 0.262473148527005], [-2.3679821019174643, 0.09258470719783683, 6.679088025990102, -5.57410037878787, -4.648794522849456, -1.2937763076179962, -1.7367217715943268, 0.28674452679235907, 0.25222952501954665, 0.262473148527005, 0.498046875]]

#df = pd.DataFrame(table_2)
#df.to_csv(csv_file, index=False, header=False)